#!/usr/bin/env python3
"""
Wrapper for the Masscan port scanner.
"""

import subprocess
import json
import os
import logging
from typing import List, Dict, Any, Optional
import tempfile

class MasscanScanner:
    """Wrapper for the Masscan port scanner."""
    
    def __init__(self, masscan_path: str = "masscan", logger: Optional[logging.Logger] = None):
        """
        Initialize the Masscan scanner wrapper.

        Args:
            masscan_path: Path to the masscan executable.
            logger: Optional logger instance.
        """
        self.logger = logger or logging.getLogger("masscan_scanner")
        self.masscan_path = masscan_path
        self.available = self._check_availability()

    def _check_availability(self) -> bool:
        """Check if Masscan is installed and executable."""
        try:
            result = subprocess.run([self.masscan_path, "--version"], 
                                   stdout=subprocess.PIPE, 
                                   stderr=subprocess.PIPE,
                                   text=True, check=False)
            if result.returncode == 0 or "Masscan version" in result.stderr or "masscan/" in result.stderr : # Masscan outputs version to stderr
                self.logger.info(f"Masscan found: {result.stderr.strip().splitlines()[0]}")
                return True
            else:
                self.logger.warning(f"Masscan not found or not working correctly at {self.masscan_path}. Stderr: {result.stderr}")
                return False
        except FileNotFoundError:
            self.logger.error(f"Masscan executable not found at {self.masscan_path}. Please install Masscan or provide the correct path.")
            return False
        except Exception as e:
            self.logger.error(f"Error checking Masscan availability: {e}")
            return False
    
    def scan(self, targets: List[str], ports: str = "0-65535", 
             rate: int = 1000, interface: Optional[str] = None,
             additional_args: Optional[List[str]] = None) -> Dict[str, Any]:
        """
        Run a Masscan scan on the specified targets.
        
        Args:
            targets: List of IP addresses or CIDR ranges to scan.
            ports: Comma-separated list of ports/port ranges (e.g., "80,443,8000-8100", "0-65535").
            rate: Packet rate in packets per second.
            interface: Network interface to use for scanning.
            additional_args: List of additional arguments to pass to masscan.
            
        Returns:
            Dict containing scan results (list of open ports per IP).
        """
        if not self.available:
            return {"error": "Masscan scanner not available."}
        
        results: Dict[str, Any] = {
            "targets_scanned": targets,
            "ports_scanned": ports,
            "findings": [],
            "errors": []
        }

        # Masscan prefers targets in a file for large scans, but can take them on cmd line too.
        # For simplicity with potentially few targets from LLM, direct CLI is fine.
        # If scanning very large ranges, using a target file (-iL) would be better.
        
        output_file = None
        try:
            with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix=".json") as tmp_output:
                output_file = tmp_output.name

            cmd = [self.masscan_path]
            cmd.extend(targets) # Add targets directly
            cmd.extend(["-p", ports])
            cmd.extend(["--rate", str(rate)])
            cmd.extend(["-oJ", output_file]) # Output in JSON format

            if interface:
                cmd.extend(["-i", interface])
            
            if additional_args:
                cmd.extend(additional_args)
            
            self.logger.info(f"Running Masscan command: {' '.join(cmd)}")
            
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            stdout, stderr = process.communicate(timeout=1800)  # 30-minute timeout

            if stderr: # Masscan often prints status to stderr
                self.logger.info(f"Masscan stderr: {stderr.strip()}")
                if "ERROR" in stderr or "failed" in stderr:
                    results["errors"].append(f"Masscan execution error: {stderr.strip()}")
            
            if process.returncode != 0 and not os.path.exists(output_file): # Check if output file was even created
                 results["errors"].append(f"Masscan process failed with code {process.returncode}. Stderr: {stderr.strip()}")
                 self.logger.error(f"Masscan process failed. Stdout: {stdout}, Stderr: {stderr}")


            # Process the JSON output file
            if os.path.exists(output_file) and os.path.getsize(output_file) > 0:
                parsed_findings = []
                with open(output_file, 'r') as f:
                    # Masscan JSON output is a stream of JSON objects, one per line (if not using -oJ with a single target)
                    # or a list of objects if -oJ is used and scan completes fully.
                    # Let's try to load it as a list first, then line by line.
                    try:
                        content = f.read()
                        # Masscan might output a list of JSON objects or JSON objects separated by commas and no surrounding brackets.
                        # A common pattern is `[ {json}, {json} ]` or just `{json}\n{json}`.
                        # If it's not a valid single JSON doc (list), try splitting.
                        if not content.strip().startswith('['): # If it's not starting like a list
                            content = '[' + content.strip().replace('}\n{', '},{').replace('}\r\n{', '},{') + ']'
                            # Remove trailing comma if any before closing bracket
                            content = content.replace(",]", "]")

                        parsed_findings = json.loads(content)
                    except json.JSONDecodeError:
                        self.logger.warning("Could not parse Masscan output as a single JSON list. Trying line by line.")
                        f.seek(0) # Reset file pointer
                        parsed_findings = []
                        for line in f:
                            line = line.strip()
                            if line: # Ensure line is not empty
                                try:
                                    # Masscan sometimes adds a comma at the end of lines if it expects more output.
                                    parsed_findings.append(json.loads(line.rstrip(',')))
                                except json.JSONDecodeError as e_line:
                                    self.logger.warning(f"Skipping malformed JSON line from Masscan: {line} - Error: {e_line}")
                
                # Structure the findings
                # Masscan output is like: {"ip": "x.x.x.x", "timestamp": "123", "ports": [ {"port": 80, "proto": "tcp", "status": "open", "reason": "syn-ack", "ttl": 64} ] }
                for entry in parsed_findings:
                    if "ip" in entry and "ports" in entry:
                        for port_info in entry["ports"]:
                            results["findings"].append({
                                "ip": entry["ip"],
                                "port": port_info["port"],
                                "protocol": port_info["proto"],
                                "status": port_info.get("status", "open") # status might not always be present
                            })
            elif not results["errors"]: # If no errors but also no output file / empty output
                self.logger.warning("Masscan produced no output or output file is empty.")
                # This can happen if no open ports are found, which is not an error.

            return results
            
        except subprocess.TimeoutExpired:
            self.logger.error("Masscan scan timed out after 30 minutes.")
            results["errors"].append("Masscan scan timed out.")
            return results
        except Exception as e:
            self.logger.error(f"Error running Masscan scan: {e}")
            results["errors"].append(f"Unexpected error: {str(e)}")
            return results
        finally:
            if output_file and os.path.exists(output_file):
                try:
                    os.unlink(output_file)
                except Exception as e_unlink:
                    self.logger.warning(f"Could not delete temporary masscan output file {output_file}: {e_unlink}")


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(name)s] %(levelname)s: %(message)s')
    
    # Requires Masscan to be installed and sudo/root if not using --unprivileged
    # On Kali, masscan is usually in /usr/bin/masscan
    scanner = MasscanScanner()

    if scanner.available:
        # Make sure you have permission to scan these targets.
        # Using scanme.nmap.org for testing.
        test_targets = ["scanme.nmap.org"] 
        # For local testing (if you have a local server running on these ports):
        # test_targets = ["127.0.0.1"]
        
        test_ports = "80,443,22" 
        # test_ports = "1-1000" # A common range

        print(f"Scanning targets: {test_targets} on ports: {test_ports}")
        # Note: Masscan can be very fast and aggressive. Use with caution on external networks.
        # The `rate` parameter is crucial.
        # For external scans, a lower rate like 100-500 might be advisable to avoid issues.
        scan_results = scanner.scan(test_targets, ports=test_ports, rate=100) 
        
        print("\nScan Results:")
        if scan_results["errors"]:
            print("Errors:")
            for err in scan_results["errors"]:
                print(f"  - {err}")
        
        if scan_results["findings"]:
            print("Open Ports Found:")
            for finding in scan_results["findings"]:
                print(f"  - IP: {finding['ip']}, Port: {finding['port']}, Protocol: {finding['protocol']}, Status: {finding['status']}")
        else:
            print("No open ports found or scan failed to produce results.")
            
        # import json
        # print("\nFull JSON Output:")
        # print(json.dumps(scan_results, indent=2))
    else:
        print("Masscan scanner is not available. Please install Masscan or check the path.")