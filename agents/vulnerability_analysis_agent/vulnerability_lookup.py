#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Vulnerability Lookup Module

This module provides functionality to search and retrieve vulnerability information
from vulnerability databases like Vulners, based on descriptions or identifiers.
"""

import os
import logging
import json
from typing import List, Dict, Any, Optional
from vulners import Vulners

# Configure logging
logger = logging.getLogger("vulnerability_analysis_agent.vulnerability_lookup")

class VulnerabilityLookup:
    """Class to look up vulnerability information from vulnerability databases"""
    
    def __init__(self, api_key=None):
        """
        Initialize the Vulnerability Lookup tool
        
        Args:
            api_key (str, optional): API key for vulnerability database access
        """
        self.api_key = api_key or os.getenv("VULNERS_API_KEY")
        
        if not self.api_key:
            logger.warning("No Vulners API key provided. Using environment variable if available.")
        
        try:
            # Import Vulners client
            from vulners import Vulners
            self.vulners_client = Vulners(api_key=self.api_key)
            logger.info("Successfully initialized Vulners client")
            self.client_available = True
        except (ImportError, Exception) as e:
            logger.error(f"Failed to initialize Vulners client: {str(e)}")
            self.client_available = False
    
    def search_vulnerability(self, description: str, max_results: int = 5) -> List[Dict]:
        """
        Search for vulnerabilities based on a description
        
        Args:
            description (str): The vulnerability description to search for
            max_results (int): Maximum number of results to return
            
        Returns:
            list: List of vulnerability information dictionaries
        """
        if not self.client_available:
            logger.warning("Vulners client not available. Cannot perform lookup.")
            return []
        
        try:
            logger.info(f"Searching for vulnerability: {description[:50]}...")
            results = self.vulners_client.find_all(description)
            
            # Process results
            processed_results = []
            for item in results[:max_results]:
                # Extract relevant information
                processed_item = {
                    "id": item.get("id"),
                    "title": item.get("title"),
                    "description": item.get("description"),
                    "published": item.get("published"),
                    "modified": item.get("modified"),
                    "cvss": item.get("cvss", {}),
                    "references": item.get("references", [])
                }
                processed_results.append(processed_item)
            
            logger.info(f"Found {len(processed_results)} matching vulnerabilities")
            return processed_results
        
        except Exception as e:
            logger.error(f"Error while searching for vulnerability: {str(e)}")
            return []
    
    def search_by_cve(self, cve_id: str) -> Optional[Dict]:
        """
        Search for a specific CVE by ID
        
        Args:
            cve_id (str): The CVE ID to search for (e.g., CVE-2021-44228)
            
        Returns:
            dict: Vulnerability information or None if not found
        """
        if not self.client_available:
            logger.warning("Vulners client not available. Cannot perform lookup.")
            return None
        
        try:
            logger.info(f"Looking up CVE: {cve_id}")
            # Use the document method to retrieve a specific CVE
            results = self.vulners_client.document(cve_id)
            
            if results:
                # Extract relevant information
                processed_item = {
                    "id": results.get("id"),
                    "title": results.get("title"),
                    "description": results.get("description"),
                    "published": results.get("published"),
                    "modified": results.get("modified"),
                    "cvss": results.get("cvss", {}),
                    "references": results.get("references", [])
                }
                return processed_item
            
            logger.warning(f"No information found for CVE: {cve_id}")
            return None
        
        except Exception as e:
            logger.error(f"Error while looking up CVE {cve_id}: {str(e)}")
            return None
    
    def pretty_print_results(self, results: List[Dict], max_results: int = 5) -> None:
        """
        Print vulnerability results in a readable format
        
        Args:
            results (list): List of vulnerability information dictionaries
            max_results (int): Maximum number of results to print
        """
        for item in results[:max_results]:
            print("=" * 80)
            print(f"CVE ID       : {item.get('id')}")
            print(f"Title        : {item.get('title')}")
            print(f"Published    : {item.get('published')}")
            print(f"Modified     : {item.get('modified')}")

            description = item.get("description", "")
            print(f"\nDescription  : {description}\n")

            cvss = item.get("cvss", {})
            print(f"CVSS Score   : {cvss.get('score')}")
            print(f"CVSS Vector  : {cvss.get('vector')}")

            references = item.get("references", [])
            if references:
                print("\nReferences:")
                for ref in references:
                    print(f"- {ref}")

            print("=" * 80 + "\n")

    def search_cve_interactive(self) -> None:
        """Interactive function to search for vulnerabilities from command line"""
        if not self.client_available:
            print("Vulners client not available. Cannot perform lookup.")
            return
        
        try:
            description = input("Enter a vulnerability description to search: ")
            
            # Perform search using Vulners client
            results = self.vulners_client.find_all(description)
            
            # Print results
            self.pretty_print_results(results)
            
        except Exception as e:
            print(f"Error while searching for vulnerability: {str(e)}")


if __name__ == "__main__":
    # Configure basic logging for standalone execution
    logging.basicConfig(level=logging.INFO)
    
    # Create a vulnerability lookup instance
    vuln_lookup = VulnerabilityLookup()
    
    # Run interactive search
    vuln_lookup.search_cve_interactive()