import json
import logging
from typing import Dict, Any
import google.generativeai as genai


class MetasploitLLMInterface:
    def __init__(self, api_key: str, model: str = "gemini-2.5-flash-preview-04-17", logger=None ):
        """
        Initialize the LLM interface with the Gemini API.
        
        Args:
            api_key: Gemini API key
            model: Model name to use
            logger: Logger instance
        """
        self.api_key = api_key
        self.model = model
        self.logger = logger or logging.getLogger(__name__)
        
        # Configure the Gemini API
        genai.configure(api_key=api_key)
        
        # Default generation config
        self.generation_config = {
            "temperature": 0.2,
            "top_p": 0.95,
            "top_k": 40,
            "max_output_tokens": 8192,
        }
        

    def determine_exploit_plan(self, target: str) -> Dict[str, Any]:
        prompt = f"""
        You are a penetration testing expert.
        Your task is to choose the best Metasploit exploit for the target: {target}.

        Provide the following:
        1. The exploit module (e.g., unix/ftp/vsftpd_234_backdoor)
        2. The payload (e.g., cmd/unix/interact)
        3. The port to target (e.g., 21)

        Format your response as JSON:
        {{
            "exploit_module": "...",
            "payload": "...",
            "rport": ...
        }}
        """
        response = self.recon_llm._call_gemini(prompt)
        print(f"Response: {response}")
        json_start = response.find("{")
        json_end = response.rfind("}") + 1
        if json_start >= 0 and json_end > json_start:
            return json.loads(response[json_start:json_end])
        else:
            return {}
