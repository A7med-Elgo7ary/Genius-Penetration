# !/usr/bin/env python3
"""
Metasploit RPC Client for the Exploitation Agent.
This module provides an interface to interact with the Metasploit Framework via RPC.
"""

import logging
import time
import json
import subprocess
import os
import sys
from pathlib import Path

# Add the parent directory to system path to enable imports
sys.path.append(str(Path(__file__).resolve().parent.parent.parent))

from utils.logger import setup_logger

from pymetasploit3.msfrpc import *

MSFRPC_AVAILABLE = True


class MetasploitRPC:
    """
    Interface for interacting with Metasploit Framework via RPC.
    """
    
    def __init__(self, host="127.0.0.1", port=55552, username="msf", password="kali", ssl=False):
        """
        Initialize Metasploit RPC client.
        
        Args:
            host (str): Metasploit RPC server host
            port (int): Metasploit RPC server port
            username (str): Metasploit RPC username
            password (str): Metasploit RPC password
            ssl (bool): Use SSL for connection
        """
        self.logger = setup_logger("metasploit_rpc")
        self.logger.info("Initializing Metasploit RPC Client")
        
        self.host = host
        self.port = port
        self.username = username
        self.password = password
        self.ssl = ssl
        
        # Check if msfrpcd is running, if not start it
        self._ensure_msfrpcd_running()
        
        # Initialize client
        if not MSFRPC_AVAILABLE:
            self.logger.warning("Metasploit RPC Python library not available. Install with: pip install pymetasploit3")
            self.client = None
        else:
            self._connect()
    
    def _ensure_msfrpcd_running(self):
        """
        Ensure that the Metasploit RPC daemon is running.
        If not, start it with the configured credentials.
        """
        # Check if msfrpcd is already running
        try:
            check_cmd = "pgrep -f msfrpcd"
            result = subprocess.run(check_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            if result.returncode == 0:
                self.logger.info("Metasploit RPC daemon is already running")
                return
                
            # Start msfrpcd
            self.logger.info("Starting Metasploit RPC daemon")
            
            ssl_flag = "-S" if self.ssl else ""
            start_cmd = f"msfrpcd {ssl_flag} -a {self.host} -p {self.port} -U {self.username} -P {self.password}"
            
            subprocess.Popen(
                start_cmd,
                shell=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            
            # Give it a moment to start up
            time.sleep(5)
            self.logger.info("Metasploit RPC daemon started")
            
        except Exception as e:
            self.logger.error(f"Failed to ensure Metasploit RPC daemon is running: {str(e)}")
            raise
    
    def _connect(self):
        """
        Connect to the Metasploit RPC server.
        """
        if not MSFRPC_AVAILABLE:
            self.logger.error("Cannot connect to Metasploit RPC: Python library not available")
            return False
            
        try:
            self.client = MsfRpcClient(
                self.password,
                server=self.host,
                port=self.port,
                ssl=self.ssl,
                username=self.username
            )
            self.logger.info("Connected to Metasploit RPC server")
            return True
        except Exception as e:
            self.logger.error(f"Failed to connect to Metasploit RPC server: {str(e)}")
            self.client = None
            return False
    
    def _ensure_connected(self):
        """
        Ensure that the client is connected to the Metasploit RPC server.
        If not, attempt to reconnect.
        
        Returns:
            bool: True if connected, False otherwise
        """
        if not MSFRPC_AVAILABLE:
            return False
            
        if self.client is None:
            return self._connect()
            
        # Try to perform a simple operation to check if the connection is still valid
        try:
            self.client.consoles.list
            return True
        except:
            self.logger.warning("Lost connection to Metasploit RPC server. Attempting to reconnect...")
            return self._connect()
    
    def run_exploit(self, module_path, target, params=None):
        """
        Run a Metasploit exploit.
        
        Args:
            module_path (str): Path to the Metasploit module
            target (str): Target for the exploit
            params (dict): Additional parameters for the exploit
            
        Returns:
            dict: Result of the exploit attempt
        """
        if not self._ensure_connected():
            return {"success": False, "message": "Not connected to Metasploit RPC server"}
            
        self.logger.info(f"Running exploit: {module_path} against {target}")
        
        try:
            # Create a new console
            console_id = self.client.consoles.console().get('id')
            
            # Prepare the module
            cmd = f"use {module_path}\n"
            
            # Set RHOSTS or RHOST depending on the module
            if "RHOSTS" in self.client.modules.use('exploit', module_path).options:
                cmd += f"set RHOSTS {target}\n"
            else:
                cmd += f"set RHOST {target}\n"
                
            # Set additional parameters
            if params:
                for param, value in params.items():
                    cmd += f"set {param} {value}\n"
        except Exception as e:
            self.logger.error(f"Error while preparing exploit command: {str(e)}")
            return {"success": False, "message": f"Error while preparing exploit command: {str(e)}"}