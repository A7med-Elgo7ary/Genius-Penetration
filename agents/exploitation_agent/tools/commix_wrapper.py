#!/usr/bin/env python3
"""
Commix Wrapper for AI-PenTest Exploitation Agent
Comprehensive command injection testing and exploitation
"""

import json
import logging
import subprocess
import tempfile
import os
import re
from datetime import datetime
from pathlib import Path
import urllib.parse

class CommixWrapper:
    """
    Comprehensive Commix wrapper for command injection exploitation
    """
    
    def __init__(self):
        """Initialize Commix wrapper"""
        self.logger = logging.getLogger("CommixWrapper")
        
        # Commix executable path
        self.commix_path = "commix"
        
        # Injection techniques
        self.techniques = {
            'classic': 'classic',
            'eval': 'eval-based',
            'time': 'time-based',
            'file': 'file-based',
            'temp': 'tempfile-based',
            'all': 'all'
        }
        
        # Common injection points
        self.injection_points = [
            'GET', 'POST', 'HTTP_COOKIE', 'HTTP_USER_AGENT', 
            'HTTP_REFERER', 'HTTP_HOST'
        ]
        
        # Test payloads for different scenarios
        self.test_payloads = {
            'basic': ';echo "commix_test"',
            'time_based': ';sleep 5',
            'file_based': ';echo "commix_test" > /tmp/commix_test.txt',
            'blind': ';if [ "$(id -u)" = "0" ]; then sleep 5; fi'
        }
        
        self.logger.info("Commix wrapper initialized")
    
    def execute_injection(self, target_url, injection_point='', technique='all', options=None):
        """Execute command injection testing using Commix"""
        self.logger.info(f"Executing Commix injection test on: {target_url}")
        
        try:
            # Build Commix command
            cmd = self._build_commix_command(target_url, injection_point, technique, options)
            
            # Execute Commix
            result = self._execute_commix(cmd)
            
            # Parse results
            injection_result = self._parse_commix_result(result, target_url)
            
            return injection_result
            
        except Exception as e:
            self.logger.error(f"Commix execution failed: {e}")
            return {
                'success': False,
                'error': str(e),
                'tool': 'commix',
                'target': target_url
            }
    
    def test_all_injection_points(self, target_url, options=None):
        """Test all possible injection points"""
        self.logger.info("Testing all injection points with Commix...")
        
        results = []
        
        for point in self.injection_points:
            try:
                result = self.execute_injection(
                    target_url=target_url,
                    injection_point=point,
                    technique='all',
                    options=options
                )
                
                result['injection_point'] = point
                results.append(result)
                
                # Stop on first successful injection
                if result.get('success'):
                    break
                    
            except Exception as e:
                self.logger.error(f"Injection test failed for {point}: {e}")
        
        return self._combine_injection_results(results)
    
    def test_specific_technique(self, target_url, technique, options=None):
        """Test specific injection technique"""
        self.logger.info(f"Testing {technique} injection technique...")
        
        if technique not in self.techniques:
            return {
                'success': False,
                'error': f'Unknown technique: {technique}',
                'available_techniques': list(self.techniques.keys())
            }
        
        return self.execute_injection(
            target_url=target_url,
            technique=technique,
            options=options
        )
    
    def execute_blind_injection(self, target_url, options=None):
        """Execute blind command injection testing"""
        self.logger.info("Executing blind injection testing...")
        
        blind_options = {
            'technique': 'time',
            'delay': '5',
            'timeout': '30',
            'retries': '3'
        }
        
        if options:
            blind_options.update(options)
        
        return self.execute_injection(
            target_url=target_url,
            technique='time',
            options=blind_options
        )
    
    def execute_os_shell_injection(self, target_url, options=None):
        """Attempt to gain OS shell access"""
        self.logger.info("Attempting OS shell access via Commix...")
        
        shell_options = {
            'os-shell': True,
            'technique': 'all',
            'batch': True
        }
        
        if options:
            shell_options.update(options)
        
        result = self.execute_injection(
            target_url=target_url,
            options=shell_options
        )
        
        # Check if shell access was gained
        if result.get('success') and 'shell' in result.get('output', '').lower():
            result['shell_access'] = True
            result['shell_info'] = self._extract_shell_info(result.get('output', ''))
        
        return result
    
    def test_file_upload_injection(self, target_url, options=None):
        """Test file upload command injection"""
        self.logger.info("Testing file upload injection...")
        
        upload_options = {
            'technique': 'file',
            'file-write': '/tmp/commix_upload_test.txt',
            'file-dest': '/var/www/html/commix_test.php'
        }
        
        if options:
            upload_options.update(options)
        
        return self.execute_injection(
            target_url=target_url,
            options=upload_options
        )
    
    def test_database_injection(self, target_url, options=None):
        """Test database-related command injection"""
        self.logger.info("Testing database command injection...")
        
        db_options = {
            'technique': 'all',
            'dbms': 'all',
            'batch': True
        }
        
        if options:
            db_options.update(options)
        
        return self.execute_injection(
            target_url=target_url,
            options=db_options
        )
    
    def execute_custom_payload(self, target_url, payload, options=None):
        """Execute custom injection payload"""
        self.logger.info(f"Executing custom payload: {payload[:50]}...")
        
        # Create temporary file with custom payload
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as f:
            f.write(payload)
            payload_file = f.name
        
        try:
            custom_options = {
                'data': payload,
                'technique': 'all'
            }
            if options:
                custom_options.update(options)
            result = self.execute_injection(
                target_url=target_url,
                options=custom_options
            )
            result['payload_file'] = payload_file
            return result
        except Exception as e:
            self.logger.error(f"Custom payload execution failed: {e}")
            return {
                'success': False,
                'error': str(e),
                'tool': 'commix',
                'target': target_url
            }
        finally:
            # Clean up temporary file
            if os.path.exists(payload_file):
                os.remove(payload_file)
            self.logger.info(f"Temporary payload file removed: {payload_file}")
            self.logger.info("Custom payload execution completed")
            return result   